name: Gemini CLI

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  gemini-cli:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@gemini-cli') && !contains(github.event.comment.body, '/review') && !contains(github.event.comment.body, '/triage'))) && 
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Get PR branch
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName --repo "$REPOSITORY")
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.get_pr_branch.outputs.name }}
          fetch-depth: 0

      - name: Get PR details
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi

          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          # Get file changes
          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Acknowledge request
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh pr comment $PR_NUMBER --body "I've received your request and I'm working on it now! ðŸ¤–" --repo $REPOSITORY

      - name: Run Gemini
        uses: ./
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{github.event.comment.body}}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          ACTION_PATH: ${{ github.action_path }}
        with:
          version: 0.1.8-rc.0
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            IMPORTANT: Use the available shell commands to gather information if needed. Do not ask for information to be provided.

            **Workflow Modes:**

            1.  **Execution Mode (Default):**
                *   Analyze the `$USER_REQUEST` and perform the required actions.

            2.  **Planning Mode:**
                *   **Trigger:** If the `$USER_REQUEST` is asking for you to plan some implementation.
                *   **Action:**
                    1.  Create a step-by-step plan. Give it a unique ID like `plan#1`, `plan#2`, etc.
                    2.  Post the plan as a PR comment. The comment must end with instructions on how to approve it, for example: `To approve this plan, please reply with: @gemini-cli plan#1 approved`
                    3.  **STOP** and wait for approval. Do not execute the plan yet.

            3.  **Approval Mode:**
                *   **Trigger:** If the `$USER_REQUEST` includes "approved" and a plan ID (e.g., `@gemini-cli plan#1 approved`).
                *   **Action:**
                    1.  The PR comments are available in the `$PR_COMMENTS` environment variable.
                    2.  Find the comment containing the original plan that matches the approved plan ID.
                    3.  Execute the steps outlined in that plan.

            **Execution Steps:**
            *   Start by gathering data: `echo "$USER_REQUEST"`, `echo "$REPOSITORY"`, `echo "$PR_NUMBER"`.
            *   For files, use `cat`, `head`, or `tail`.
            *   If you make code changes, use `git add .`, `git commit -m "..."`, and `git push`.
            *   Write your final response to `response.md` and post it with `gh pr comment $PR_NUMBER --body-file response.md`.
