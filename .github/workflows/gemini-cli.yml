name: Gemini CLI

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  gemini-cli:
    if: |
      (
        (
          github.event_name == 'issue_comment' &&
          contains(github.event.comment.body, '@gemini-cli') &&
          !contains(github.event.comment.body, '/review') &&
          !contains(github.event.comment.body, '/triage') &&
          (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review_comment' &&
          contains(github.event.comment.body, '@gemini-cli') &&
          !contains(github.event.comment.body, '/review') &&
          !contains(github.event.comment.body, '/triage') &&
          (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER' || github.event.comment.author_association == 'COLLABORATOR')
        ) ||
        (
          github.event_name == 'pull_request_review' &&
          contains(github.event.review.body, '@gemini-cli') &&
          !contains(github.event.review.body, '/review') &&
          !contains(github.event.review.body, '/triage') &&
          (github.event.review.author_association == 'OWNER' || github.event.review.author_association == 'MEMBER' || github.event.review.author_association == 'COLLABORATOR')
        )
      )
    timeout-minutes: 15
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
      issues: write
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Get PR branch
        id: get_pr_branch
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            PR_NUMBER=${{ github.event.issue.number }}
            BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName --repo "$REPOSITORY")
            echo "name=$BRANCH" >> $GITHUB_OUTPUT
          else
            echo "name=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.get_pr_branch.outputs.name }}
          fetch-depth: 0

      - name: Get PR details
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER=${{ github.event.inputs.pr_number }}
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            PR_NUMBER=${{ github.event.issue.number }}
          else
            PR_NUMBER=${{ github.event.pull_request.number }}
          fi
          echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"

          COMMENT_BODY=""
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
          elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
          elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
            COMMENT_BODY="${{ github.event.review.body }}"
          fi
          echo "comment_body<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMENT_BODY" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=$PR_DATA" >> "$GITHUB_OUTPUT"

          CHANGED_FILES=$(gh pr diff $PR_NUMBER --name-only)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGED_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Get PR Comments
        id: get_pr_comments
        if: contains(steps.get_pr.outputs.comment_body, 'approved') && contains(steps.get_pr.outputs.comment_body, 'plan#')
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          COMMENTS=$(gh pr view $PR_NUMBER --json comments -q '.comments[].body' --repo $REPOSITORY)
          echo "comments<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMENTS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Acknowledge request
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          gh pr comment $PR_NUMBER --body "I've received your request and I'm working on it now! ðŸ¤–" --repo $REPOSITORY

      - name: Run Gemini
        uses: ./
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          REPOSITORY: ${{ github.repository }}
          USER_REQUEST: ${{ steps.get_pr.outputs.comment_body }}
          PR_NUMBER: ${{ steps.get_pr.outputs.pr_number }}
          PR_COMMENTS: ${{ steps.get_pr_comments.outputs.comments }}
        with:
          version: 0.1.8-rc.0
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OTLP_GCP_WIF_PROVIDER: ${{ secrets.OTLP_GCP_WIF_PROVIDER }}
          OTLP_GOOGLE_CLOUD_PROJECT: ${{ secrets.OTLP_GOOGLE_CLOUD_PROJECT }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |
            You are a software engineer AI assistant.

            **Context:**
            - User Request: "$USER_REQUEST"
            - Repository: "$REPOSITORY"
            - PR Number: "$PR_NUMBER"
            - PR Comments (only available on plan approval): "$PR_COMMENTS"

            **Workflow:**

            1.  **Analyze Request:**
                *   If the `$USER_REQUEST` contains "plan#", it's an approval for a plan. Go to step 3.
                *   If the `$USER_REQUEST` contains the word "plan", it's a request to create a new plan. Go to step 2.
                *   Otherwise, it's a direct request to execute. Go to step 4.

            2.  **Create Plan:**
                *   Analyze the user's request to create a detailed, step-by-step execution plan.
                *   Use `gh pr view $PR_NUMBER --json comments` to find previous plans and determine the next plan number (e.g., if `plan#1` exists, the new one is `plan#2`). If no plans exist, start with `plan#1`.
                *   Create a unique ID for the plan (e.g., `plan#1`).
                *   Post the plan to the PR using `gh pr comment`. The message MUST be formatted like this:
                    ```
                    **Plan `plan#1`**

                    1. Step one...
                    2. Step two...
                    3. Step three...

                    To approve this plan, please reply with the following comment:
                    `@gemini-cli plan#1 approved`
                    ```
                *   After posting the plan, STOP. Do not proceed with implementation.

            3.  **Approve and Execute Plan:**
                *   The user has approved the plan via a comment like `@gemini-cli plan#1 approved`.
                *   The full plan is available in the `$PR_COMMENTS` variable. You must find the comment containing the plan ID from the user's request.
                *   Execute the steps from the approved plan.

            4.  **Direct Execution:**
                *   Fulfill the `$USER_REQUEST` directly.

            **Implementation Guide:**
            *   Use the available tools to perform the work.
            *   If you modify files, use `git add .` (but not for `response.md`), `git commit`, and `git push`.
            *   For your final response, write it to a file: `write_file("response.md", "<your response here>")`.
            *   Post the response to the PR: `gh pr comment $PR_NUMBER --body-file response.md --repo $REPOSITORY`.
