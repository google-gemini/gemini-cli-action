name: Scheduled Issue Triage

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: {}

jobs:
  find-untriaged-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      issues: read
    outputs:
      issues: ${{ steps.find_issues.outputs.issues }}
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Find untriaged issues
        id: find_issues
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          ISSUE_NUMBERS=$(gh issue list --search "is:open is:issue (no:label or label:\"status/needs-triage\")" --json number -q '. | tojson')
          echo "issues=$ISSUE_NUMBERS" >> "$GITHUB_OUTPUT"

  triage-issue:
    needs: find-untriaged-issues
    if: fromJson(needs.find-untriaged-issues.outputs.issues)[0] != null
    strategy:
      matrix:
        issue: ${{ fromJson(needs.find-untriaged-issues.outputs.issues) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.issue.number }}
      cancel-in-progress: true
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}

      - name: Run Gemini Issue Triage
        uses: google-gemini/gemini-cli-action@main
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "coreTools": [
                "ReadFileTool",
                "ShellTool(gh label list)",
                "ShellTool(gh issue edit)"
              ]
            }
          prompt: |
            You are an issue triage assistant for GitHub issues.
            Your task is to analyze the issue and apply appropriate labels from the repository's list of available labels.

            **IMPORTANT: Your only action should be to apply labels. Do not post any comments or modify any code.**

            **Triage Workflow:**

            1.  **Fetch Available Labels:**
                - Execute the following shell command to get the list of all labels in the repository:
                  `gh label list`

            2.  **Analyze the Issue:**
                - Based on the issue title, body, and any comments, determine the most appropriate labels.
                - Consider the type of issue (e.g., `kind/bug`, `kind/enhancement`, `kind/documentation`), the area of the codebase it affects (e.g., `area/core`, `area/ux`, `area/tools`), and assess the priority if possible (e.g., `priority/p1`, `priority/p2`).

            3.  **Apply Labels:**
                - Use the `gh` command-line tool to add the selected labels to the issue.
                - Example command: `gh issue edit ${{ matrix.issue.number }} --add-label "kind/bug,area/core"`
                - You can add multiple labels in a single command.

            **Guidelines:**
            - Only use labels that exist in the repository (from the `gh label list` command).
            - Do not add a comment to the issue.
            - If no labels seem appropriate, do not apply any.

            **Issue Information:**
            - Repository: ${{ github.repository }}
            - Issue Number: ${{ matrix.issue.number }}
            - Issue Title: ${{ matrix.issue.title }}
            - Issue Body: ${{ matrix.issue.body }}
